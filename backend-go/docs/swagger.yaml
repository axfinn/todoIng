openapi: 3.0.0
info:
  title: TodoIng API
  description: TodoIng task management system API
  version: 1.0.0

servers:
  - url: http://localhost:5001/api
    description: Local development server

paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 6
              required:
                - username
                - email
                - password
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Bad request
        '500':
          description: Server error

  /auth/login:
    post:
      summary: Login user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials
        '500':
          description: Server error

  /auth/me:
    get:
      summary: Get current user
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user data
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /tasks:
    get:
      summary: Get all tasks for current user
      tags:
        - Tasks
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '401':
          description: Unauthorized
        '500':
          description: Server error

    post:
      summary: Create a new task
      tags:
        - Tasks
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                status:
                  type: string
                  enum: [To Do, In Progress, Done]
                priority:
                  type: string
                  enum: [Low, Medium, High]
                assignee:
                  type: string
                  nullable: true
                deadline:
                  type: string
                  format: date-time
                  nullable: true
                scheduledDate:
                  type: string
                  format: date-time
                  nullable: true
              required:
                - title
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /tasks/{id}:
    put:
      summary: Update a task
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                status:
                  type: string
                  enum: [To Do, In Progress, Done]
                priority:
                  type: string
                  enum: [Low, Medium, High]
                assignee:
                  type: string
                  nullable: true
                deadline:
                  type: string
                  format: date-time
                  nullable: true
                scheduledDate:
                  type: string
                  format: date-time
                  nullable: true
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Task not found
        '500':
          description: Server error

    delete:
      summary: Delete a task
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: Task not found
        '500':
          description: Server error

  /tasks/{id}/comments:
    post:
      summary: Add a comment to a task
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
              required:
                - text
      responses:
        '200':
          description: Comment added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Task not found
        '500':
          description: Server error

  /reports:
    get:
      summary: Get all reports for current user
      tags:
        - Reports
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of reports
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Report'
        '401':
          description: Unauthorized
        '500':
          description: Server error

    post:
      summary: Generate a new report
      tags:
        - Reports
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum: [daily, weekly, monthly]
                period:
                  type: string
                startDate:
                  type: string
                  format: date-time
                endDate:
                  type: string
                  format: date-time
              required:
                - type
                - period
                - startDate
                - endDate
      responses:
        '201':
          description: Report generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /reports/{id}:
    get:
      summary: Get a specific report
      tags:
        - Reports
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Report data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        '401':
          description: Unauthorized
        '404':
          description: Report not found
        '500':
          description: Server error

    delete:
      summary: Delete a report
      tags:
        - Reports
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Report deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: Report not found
        '500':
          description: Server error

  /reports/{id}/polish:
    post:
      summary: Polish a report with AI
      tags:
        - Reports
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                apiKey:
                  type: string
                model:
                  type: string
                apiUrl:
                  type: string
                provider:
                  type: string
      responses:
        '200':
          description: Report polished successfully
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Report not found
        '500':
          description: Server error

  /reports/{id}/export/{format}:
    get:
      summary: Export a report
      tags:
        - Reports
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: format
          in: path
          required: true
          schema:
            type: string
            enum: [text, markdown]
      responses:
        '200':
          description: Report exported successfully
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: Unauthorized
        '404':
          description: Report not found
        '500':
          description: Server error

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        createdAt:
          type: string
          format: date-time

    Comment:
      type: object
      properties:
        id:
          type: string
        text:
          type: string
        createdBy:
          type: string
        createdAt:
          type: string
          format: date-time

    Task:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [To Do, In Progress, Done]
        priority:
          type: string
          enum: [Low, Medium, High]
        assignee:
          type: string
          nullable: true
        createdBy:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deadline:
          type: string
          format: date-time
          nullable: true
        scheduledDate:
          type: string
          format: date-time
          nullable: true
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'

    ReportStatistics:
      type: object
      properties:
        totalTasks:
          type: integer
        completedTasks:
          type: integer
        inProgressTasks:
          type: integer
        overdueTasks:
          type: integer
        completionRate:
          type: integer

    Report:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        type:
          type: string
          enum: [daily, weekly, monthly]
        period:
          type: string
        title:
          type: string
        content:
          type: string
        polishedContent:
          type: string
          nullable: true
        tasks:
          type: array
          items:
            type: string
        statistics:
          $ref: '#/components/schemas/ReportStatistics'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT